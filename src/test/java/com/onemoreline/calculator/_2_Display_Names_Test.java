package com.onemoreline.calculator;

import org.junit.jupiter.api.*;
import java.lang.reflect.Method;

// You can use one of predefined name generators:
// DisplayNameGenerator.Standard
// DisplayNameGenerator.ReplaceUnderscores
// Or define yours:

@DisplayNameGeneration(MyGenerator.class)
public class _2_Display_Names_Test {

    @Test
    //@DisplayName("ADDING NUMBERS TEST___")
    //Values provided via @DisplayName annotations ALWAYS TAKE PRECEDENCE over display names generated by a DisplayNameGenerator
    public void shouldAddNumbers() {
        Calculator calculator = new Calculator();
        Assertions.assertEquals(10,  calculator.add(5,5));
    }

    @Test
    public void should_subtract_numbers() {
        Calculator calculator = new Calculator();
        Assertions.assertEquals(0,  calculator.sub(5,5));
    }

    // Nested class MUST be annotated with @Nested
    // Nested tests will be ignored otherwise
    @org.junit.jupiter.api.Nested
    class Nested {
        @Test
        public void should_subtract_numbers() {
            Calculator calculator = new Calculator();
            Assertions.assertEquals(0,  calculator.sub(5,5));
        }
    }

}

// It is possible to declare your own display name generator
// Must implement DisplayNameGenerator interface
// Allows to generate names for
// - Class
// - Nested class
// - Methods

class MyGenerator implements DisplayNameGenerator {
    @Override
    public String generateDisplayNameForClass(Class<?> aClass) {
        return "CLAZZ";
    }

    @Override
    public String generateDisplayNameForNestedClass(Class<?> aClass) {
        return "NESTED_CLAZZ";
    }

    @Override
    public String generateDisplayNameForMethod(Class<?> aClass, Method method) {
        return method.getName().replace("_", "$$$");
    }
}

